#!/usr/bin/python

### BEGIN INIT INFO
# Provides:        ofad-baseconf
# Required-Start:  initdev
# Required-Stop:   
# Default-Start:   S
# Default-Stop:    
# Short-Description: Set up ofad.conf
### END INIT INFO

import hashlib, json, os, re, subprocess, sys

sys.stderr.write("Setting up base ofad configuration...")
sys.stderr.flush()

PLAT_LB9                = "quanta-lb9"
PLAT_LB9A               = "quanta-lb9a"
PLAT_LY2                = "quanta-ly2"
PLAT_CELESTICA_REDSTONE = "celestica-redstone"
PLAT_UNKNOWN            = "unknown"

PHY_BASE_NAME           = "eth"
LAG_BASE_NAME           = "lag"

# define number of ether ports for each platform
NUM_PHY_PORTS = {
    PLAT_LB9                : 52,
    PLAT_LB9A               : 52,
    PLAT_LY2                : 52,
    PLAT_CELESTICA_REDSTONE : 52,
    PLAT_UNKNOWN            : 0
}

conf = {}

try:
    plat = file("/etc/sl_platform").read().strip()
except IOError:
    plat = PLAT_UNKNOWN

conf["of_mfr_desc"] = "Big Switch Networks"
conf["of_hw_desc"] = ""
conf["of_serial_num"] = ""
if plat.startswith("quanta-"):
    import pandora.quanta
    conf["of_mfr_desc"] = "Quanta"
    bi = pandora.quanta.board_info
    conf["of_hw_desc"] = "%s (%s)" % (bi("product_name"), bi("part_num"))
    conf["of_serial_num"] = bi("serial_num")
else:
    pass

conf["of_mac_addr_base"] = "00:00:00:00:00:00"
conf["of_datapath_id"] = "0x0000000000000000"
try:
    x = subprocess.check_output(["/sbin/ip", "link", "show", "ma1"])
    m = re.search("link/ether ([0-9a-f:]*)", x)
    if m:
        ma1mac = m.group(1)
        h = hashlib.sha1()
        h.update(ma1mac)
        ma1hash = h.hexdigest()
        macbase = "5c:16:c7:1%s:%s%s:%s%s" % tuple(ma1hash[:5])
        conf["of_mac_addr_base"] = macbase
        conf["of_datapath_id"] = "0x0000" + macbase.replace(":", "")
except (OSError, subprocess.CalledProcessError):
    pass

conf["of_sw_desc"] = ""
try:
    conf["of_sw_desc"] = file("/etc/sl_version").read().strip()
except IOError:
    pass

conf["controllers"] = []
conf["failover_mode"] = "serial"
conf["keepalive_period_ms"] = 10000
conf["of_dp_desc"] = ""
conf["table_miss_action"] = "packet-in"

conf["version"] = 1

conf["physical_base_name"] = PHY_BASE_NAME
conf["lag_base_name"] = LAG_BASE_NAME
conf["port_list"] = dict([("%s%d" % (PHY_BASE_NAME, i+1), {}) \
                          for i in range(NUM_PHY_PORTS.get(plat))])

json.dump(conf, file("/etc/ofad.conf", "w"), indent=4, sort_keys=True)

if os.path.exists("/usr/bin/ofad"):
    os.unlink("/usr/bin/ofad")
if os.path.exists("/lib/modules/linux-kernel-bde.ko"):
    os.unlink("/lib/modules/linux-kernel-bde.ko")
if os.path.exists("/lib/modules/linux-user-bde.ko"):
    os.unlink("/lib/modules/linux-user-bde.ko")


if os.path.exists("/etc/.use-ofad-6.2"):
    os.symlink("ofad-6.2", "/usr/bin/ofad")
    os.symlink("linux-kernel-bde-6.2.ko", "/lib/modules/linux-kernel-bde.ko")
    os.symlink("linux-user-bde-6.2.ko", "/lib/modules/linux-user-bde.ko")
else:
    if plat in [PLAT_LB9, PLAT_LB9A]:
        os.symlink("ofad-5.6", "/usr/bin/ofad")
        os.symlink("linux-kernel-bde-5.6.ko", "/lib/modules/linux-kernel-bde.ko")
        os.symlink("linux-user-bde-5.6.ko", "/lib/modules/linux-user-bde.ko")
    elif plat in [PLAT_LY2, PLAT_CELESTICA_REDSTONE]:
        os.symlink("ofad-5.10", "/usr/bin/ofad")
        os.symlink("linux-kernel-bde-5.10.ko", "/lib/modules/linux-kernel-bde.ko")
        os.symlink("linux-user-bde-5.10.ko", "/lib/modules/linux-user-bde.ko")
    
if plat == PLAT_LB9:
    subprocess.call("/usr/bin/brcm_lb9_gpio_init")
if plat == PLAT_LY2:
    subprocess.call("/usr/bin/brcm_ly2_gpio_init")

sys.stderr.write("done.\n")
